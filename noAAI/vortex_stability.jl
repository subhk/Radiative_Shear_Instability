using LazyGrids
using BlockArrays
using Printf
using Statistics
using SparseArrays
using SparseMatrixDicts
using SpecialFunctions
using FillArrays
using Parameters
using Test
using BenchmarkTools
using Trapz
using BasicInterpolators: BicubicInterpolator
#using Suppressor: @suppress_err

using Serialization
using Dierckx
using LinearAlgebra
using JLD2
#using SparseMatricesCSR
using MatrixMarket: mmwrite
using SparseMatricesCOO

using CairoMakie
using LaTeXStrings
CairoMakie.activate!()
using DelimitedFiles
using ColorSchemes
using MAT
using IterativeSolvers
using DSP

using Pardiso
using Arpack
using LinearMaps
using ArnoldiMethod

#using Dierckx: Spline2D, evaluate

ENV["PYTHON"] = "/home/subhajitkar/anaconda_nw/bin/python"
using PyCall
@pyimport scipy.interpolate as si

# include("../feast.jl")
# using ..feastLinear

# include("../FEASTSolver/src/FEASTSolver.jl")
# using Main.FEASTSolver

include("dmsuite.jl")
include("transforms.jl")
include("utils.jl")
include("shift_invert.jl")

# function Interp2D(rn, zn, An, grid)
#     itp = BicubicInterpolator(rn, zn, An)
#     A‚ÇÄ = [itp(r·µ¢, z·µ¢) for r·µ¢ in grid.r, z·µ¢ in grid.z]
#     return A‚ÇÄ
# end

function low_PassFilter_y(cutoff_freq, fs, data)
    responsetype    = Lowpass(cutoff_freq; fs=fs)
    designmethod    = Butterworth(6)
    setfilter       = digitalfilter(responsetype, designmethod);
    lowpass  = similar(data)
    for jt in 1:size(data,2)
        for kt in 1:size(data,3)
            lowpass[:,jt,kt] = filtfilt(setfilter, data[:,jt,kt])
        end
    end
    return lowpass
end

function low_PassFilter_x(cutoff_freq, fs, data)
    responsetype    = Lowpass(cutoff_freq; fs=fs)
    designmethod    = Butterworth(6)
    setfilter       = digitalfilter(responsetype, designmethod);
    lowpass  = similar(data)
    for jt in 1:size(data,1)
        for kt in 1:size(data,3)
            lowpass[jt,:,kt] = filtfilt(setfilter, data[jt,:,kt])
        end
    end
    return lowpass
end

function Interp2D(rn, zn, An, grid)
    spl = Spline2D(rn, zn, An; s=0.0)
    A‚ÇÄ = [spl(r·µ¢, z·µ¢) for r·µ¢ in grid.r, z·µ¢ in grid.z]
    return A‚ÇÄ
end

#### plotting the eigenfunction
function Interp2D_eigenFun(yn, zn, An, y0, z0)
    itp = BicubicInterpolator(yn, zn, transpose(An))
    A‚ÇÄ = zeros(Float64, length(y0), length(z0))
    A‚ÇÄ = [itp(y·µ¢, z·µ¢) for y·µ¢ ‚àà y0, z·µ¢ ‚àà z0]
    return A‚ÇÄ
end

# function Interp2D(rn, zn, An, grid)
#     spl   = si.RectBivariateSpline(rn, zn, An)
#     value = [spl(r·µ¢, z·µ¢) for r·µ¢ in grid.r, z·µ¢ in grid.z]
#     A‚ÇÄ  = zeros(Float64, length(grid.r), length(grid.z))
#     A‚ÇÄ .= value
#     return A‚ÇÄ #value
# end

# function Interp2D_eigenFun(rn, zn, An, r0, z0)
#     spl = Spline2D(rn, zn, An)
#     A‚ÇÄ = zeros(Float64, length(r0), length(z0))
#     A‚ÇÄ = [spl(r·µ¢, z·µ¢) for r·µ¢ ‚àà r0, z·µ¢ ‚àà z0]
#     return A‚ÇÄ
# end

function twoDContour(r, z, Œß, N, it)
    which::Int = 1
    u·µ£ = cat( real(Œß[   1:1N, which]), imag(Œß[   1:1N, which]), dims=2 ); 
    u‚Çú  = cat( real(Œß[1N+1:2N, which]), imag(Œß[1N+1:2N, which]), dims=2 ); 
    w  = cat( real(Œß[2N+1:3N, which]), imag(Œß[2N+1:3N, which]), dims=2 ); 
    p  = cat( real(Œß[3N+1:4N, which]), imag(Œß[3N+1:4N, which]), dims=2 ); 
    b  = cat( real(Œß[4N+1:5N, which]), imag(Œß[4N+1:5N, which]), dims=2 ); 

    u·µ£ = reshape( u·µ£[:,1], (length(z), length(r)) )
    u‚Çú  = reshape( u‚Çú[:,1], (length(z), length(r)) )
    w  = reshape( w[:,1],  (length(z), length(r)) )
    b  = reshape( b[:,1],  (length(z), length(r)) )

    #U  = reshape( U,  (length(z), length(r)) )
    #B  = reshape( B,  (length(z), length(r)) )

    r_interp = collect(LinRange(minimum(r), maximum(r), 1000))
    z_interp = collect(LinRange(minimum(z), maximum(z), 100) )

    Œîr = r_interp[2] - r_interp[1]
    Œîz = z_interp[2] - z_interp[1]
	cutoff_freq_x = 0.12/Œîr  # Cutoff frequency
	fs_x = 1.0/Œîr
	cutoff_freq_y = 0.12/Œîz  # Cutoff frequency
	fs_y = 1.0/Œîz

    #U_interp = Interp2D_eigenFun(r, z, U, r_interp, z_interp)
    #B_interp = Interp2D_eigenFun(r, z, B, r_interp, z_interp)

    fig = Figure(fontsize=30, size = (1800, 580), )

    ax1 = Axis(fig[1, 1], xlabel=L"$r/R$", xlabelsize=30, ylabel=L"$z/H$", ylabelsize=30)

    interp_ = Interp2D_eigenFun(r, z, u·µ£, r_interp, z_interp)
    interp_ = low_PassFilter_y(cutoff_freq_y, fs_y, interp_)
	interp_ = low_PassFilter_x(cutoff_freq_x, fs_x, interp_)
    max_val = maximum(abs.(interp_))
    levels = range(-0.7max_val, 0.7max_val, length=16)
    co = contourf!(r_interp, z_interp, interp_, colormap=cgrad(:RdBu, rev=false),
        levels=levels, extendlow = :auto, extendhigh = :auto )

    # levels = range(minimum(U), maximum(U), length=8)
    # contour!(r_interp, z_interp, U_interp, levels=levels, linestyle=:dash, color=:black, linewidth=2) 

    # contour!(rn, zn, AmS, levels=levels‚Çã, linestyle=:dash,  color=:black, linewidth=2) 
    # contour!(rn, zn, AmS, levels=levels‚Çä, linestyle=:solid, color=:black, linewidth=2) 

    tightlimits!(ax1)
    cbar = Colorbar(fig[1, 2], co)
    xlims!(0.0, maximum(r))
    ylims!(0.0, maximum(z))

    ax2 = Axis(fig[1, 3], xlabel=L"$r/R$", xlabelsize=30, ylabel=L"$z/H$", ylabelsize=30)

    interp_ = Interp2D_eigenFun(r, z, w, r_interp, z_interp)
    interp_ = low_PassFilter_y(cutoff_freq_y, fs_y, interp_)
	interp_ = low_PassFilter_x(cutoff_freq_x, fs_x, interp_)
    max_val = maximum(abs.(interp_))
    levels = range(-0.7max_val, 0.7max_val, length=16)
    co = contourf!(r_interp, z_interp, interp_, colormap=cgrad(:RdBu, rev=false),
        levels=levels, extendlow = :auto, extendhigh = :auto )

    # levels = range(minimum(U), maximum(U), length=8)
    # contour!(r_interp, z_interp, U_interp, levels=levels, linestyle=:dash, color=:black, linewidth=2) 
        
    # contour!(rn, zn, AmS, levels=levels‚Çã, linestyle=:dash,  color=:black, linewidth=2) 
    # contour!(rn, zn, AmS, levels=levels‚Çä, linestyle=:solid, color=:black, linewidth=2) 

    tightlimits!(ax2)
    cbar = Colorbar(fig[1, 4], co)
    xlims!(0.0, maximum(r))
    ylims!(0.0, maximum(z))

    ax1.title = L"$\mathfrak{R}(\hat{u}_r)$"
    ax2.title = L"$\mathfrak{R}(\hat{w})$"

    fig
    filename = "AAI2d_" * string(it) * ".png"
    save(filename, fig, px_per_unit=4)

end


@with_kw mutable struct Grid{Nr, Nz, T} 
    D ≥::Array{T, 2}   = SparseMatrixCSC(Zeros(Nr, Nr))
    D·∂ª::Array{T, 2}   = SparseMatrixCSC(Zeros(Nz, Nz))
    D ≥ ≥::Array{T, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))
    D·∂ª·∂ª::Array{T, 2}  = SparseMatrixCSC(Zeros(Nz, Nz))
    r::Vector{T}      = zeros(Float64, Nr)
    z::Vector{T}      = zeros(Float64, Nz)
end

@with_kw mutable struct Operator{N, T} 
    ùíü ≥::Array{T, 2}  = SparseMatrixCSC(Zeros(N, N))
    ùíü·∂ª::Array{T, 2}  = SparseMatrixCSC(Zeros(N, N))
    ùíü¬≤::Array{T, 2}  = SparseMatrixCSC(Zeros(N, N))
end

@with_kw mutable struct MeanFlow{N, T} 
    U‚ÇÄ::Array{T, 1}    = zeros(Float64, N) #SparseMatrixCSC(Zeros(N))
    Œ©‚ÇÄ::Array{T, 1}    = zeros(Float64, N)
    B‚ÇÄ::Array{T, 1}    = zeros(Float64, N) #SparseMatrixCSC(Zeros(N))
    Œ∂‚ÇÄ::Array{T, 1}    = zeros(Float64, N) #SparseMatrixCSC(Zeros(N))

    ‚àÇ ≥U‚ÇÄ::Array{T, 1}  = zeros(Float64, N)
    ‚àÇ ≥B‚ÇÄ::Array{T, 1}  = zeros(Float64, N)
    ‚àÇ·∂ªU‚ÇÄ::Array{T, 1}  = zeros(Float64, N)
    ‚àÇ·∂ªŒ©‚ÇÄ::Array{T, 1}  = zeros(Float64, N)
    ‚àÇ·∂ªB‚ÇÄ::Array{T, 1}  = zeros(Float64, N)
end

function ddz(z)
    del = z[2] - z[1]
    N = length(z)
    d = zeros(N, N)
    for n in 2:N-1
        d[n, n-1] = -1.0
        d[n, n+1] = 1.0
    end
    d[1, 1] = -3.0; d[1, 2]   = 4.0;  d[1, 3]   = -1.0; 
    d[N, N] = 3.0;  d[N, N-1] = -4.0; d[N, N-2] = 1.0
    d = d / (2 * del)
    return d
end

function ddz2(z)
    del = z[2] - z[1]
    N = length(z)
    d = zeros(N, N)
    for n in 2:N-1
        d[n, n-1] = 1.0; d[n, n] = -2.0
        d[n, n+1] = 1.0
    end
    d[1, 1] = 2.0;   d[1, 2] = -5.0; d[1, 3] = 4.0
    d[1, 4] = -1.0;  d[N, N] = 2.0;  d[N, N-1] = -5.0
    d[N, N-2] = 4.0; d[N, N-3] = -1.0
    d = d / del^2
    return d
end

function spectral_zderiv(var, z, L, parity, nmax)
    @assert ndims(var) == 2
    @assert length(z)  == size(var)[2]
    @assert parity == "cos" || parity == "sin"
    n   = 1:1:nmax
    Ay  = zeros(size(var))
    ny = size(var)[1]
    if parity == "cos"
        for it in n
            m = it*œÄ/L
            @inbounds for iy ‚àà 1:ny
                An  = trapz((z), var[iy,:] .* cos.(m*z)) * 2.0/L
                @. Ay[iy,:] += -An * sin(m*z) * m
            end
        end
    else
        for it in n
            m = it*œÄ/L
            @inbounds for iy ‚àà 1:ny
                An  = trapz((z), var[iy,:] .* sin.(m*z)) * 2.0/L
                @. Ay[iy,:] += An * cos(m*z) * m
            end
        end
    end
    return Ay
end

function ChebMatrix!(grid, params)
    # ------------- setup discrete diff matrices  -------------------
    ## chebyshev in y-direction
    grid.r, grid.D ≥  = chebdif(params.Nr, 1)
    grid.r, grid.D ≥ ≥ = chebdif(params.Nr, 2)
    # Transform [0, R‚Çò‚Çê‚Çì]
    grid.r, grid.D ≥, grid.D ≥ ≥ = chebder_transform(grid.r, 
                                                grid.D ≥, 
                                                grid.D ≥ ≥, 
                                                zerotoL_transform, 
                                                params.R)

    # @printf "maximum(grid.D ≥ * grid.r): %f \n" maximum(grid.D ≥ * grid.r)

    ## chebyshev in z-direction
    grid.z, grid.D·∂ª  = chebdif(params.Nz, 1)
    grid.z, grid.D·∂ª·∂ª = chebdif(params.Nz, 2)
    # Transform the domain and derivative operators from [-1, 1] ‚Üí [0, H]
    grid.z, grid.D·∂ª, grid.D·∂ª·∂ª = chebder_transform(grid.z, 
                                                grid.D·∂ª, 
                                                grid.D·∂ª·∂ª, 
                                                zerotoL_transform, 
                                                params.H)

    # grid.z, grid.D·∂ª = cheb(params.Nz-1)
    # grid.D·∂ª·∂ª = grid.D·∂ª * grid.D·∂ª

    grid.r    = range(0.0, stop=params.R, length=params.Nr) |> collect
    grid.D ≥   = ddz(  grid.r );
    grid.D ≥ ≥  = ddz2( grid.r );

    grid.z    = range(0.0, stop=params.H, length=params.Nz) |> collect
    grid.D·∂ª   = ddz(  grid.z );
    grid.D·∂ª·∂ª  = ddz2( grid.z );

    # grid.r   = collect(range(0.0, stop=params.R, length=params.Nr));
    # grid.D ≥  = ddz_4(  grid.r ); 
    # grid.D ≥ ≥ = ddz2_4( grid.r );

    # grid.z   = collect(range(0.0, stop=params.H, length=params.Nz));
    # grid.D·∂ª  = ddz_4(  grid.z ); 
    # grid.D·∂ª·∂ª = ddz2_4( grid.z );

    @printf "grid.r[1], grid.r[2]: %f %f \n" grid.r[1] grid.r[2]

    @assert maximum(grid.r) ‚âà params.R
    @assert maximum(grid.z) ‚âà params.H

    return nothing
end

function ChebDiff_Matrix!(Op, params, grid, T)
    N  = params.Nr * params.Nz
    I ≥ = sparse(1.0I, params.Nr, params.Nr) 
    I·∂ª = sparse(1.0I, params.Nz, params.Nz) 
    I‚Å∞ = Eye{T}(N)

    R, Z = ndgrid(grid.r, grid.z)
    R  = transpose(R); Z = transpose(Z); 
    R  = R[:]; Z = Z[:];
    R¬≤ = @. R^2;

    ùíü ≥ ≥::Array{T, 2} = SparseMatrixCSC(Zeros(N, N))
    ùíü·∂ª·∂ª::Array{T, 2} = SparseMatrixCSC(Zeros(N, N))

    kron!( Op.ùíü ≥, grid.D ≥ , I·∂ª )
    kron!( ùíü ≥ ≥  , grid.D ≥ ≥, I·∂ª )
    kron!( Op.ùíü·∂ª, I ≥, grid.D·∂ª  )
    kron!( ùíü·∂ª·∂ª  , I ≥, grid.D·∂ª·∂ª )

    @testset "Checking derivative operators ..." begin
        t1 = Op.ùíü·∂ª * Z;
        @test maximum(t1) ‚âà 1.0 atol=1.0e-5
        @test minimum(t1) ‚âà 1.0 atol=1.0e-5
        t1 = Op.ùíü ≥ * R;
        @test maximum(t1) ‚âà 1.0 atol=1.0e-5
        @test minimum(t1) ‚âà 1.0 atol=1.0e-5
        n::Int32 = 2
        p1 = @. Z^n; 
        t1 = ùíü·∂ª·∂ª * p1;
        @test maximum(t1) ‚âà factorial(n) atol=1.0e-5
        @test minimum(t1) ‚âà factorial(n) atol=1.0e-5
        p1 = @. R^n; 
        t1 = ùíü ≥ ≥ * p1;
        @test maximum(t1) ‚âà factorial(n) atol=1.0e-5
        @test minimum(t1) ‚âà factorial(n) atol=1.0e-5
    end

    R[R .== 0.0] .= 1.0e-6
    R‚Åª¬π = diagm(   1.0 ./ R    )
    R‚Åª¬≤ = diagm(  1.0 ./ R.^2  )
    # R‚ÇÄ   = diagm(   1.0 .* R   )
    # R‚ÇÄ¬≤  = diagm(   1.0 .* R¬≤  )

    # diffusivity operator
    Op.ùíü¬≤ = @. -1.0params.E * (  1.0 * ùíü ≥ ≥ 
                            + 1.0 * R‚Åª¬π * Op.ùíü ≥ 
                            - 1.0 * params.m^2 * R‚Åª¬≤ * I‚Å∞
                            + 1.0/params.Œµ^2 * ùíü·∂ª·∂ª );
    return nothing
end


function meanflow!(mf, Op, params, grid, T)
    # file = matopen("eddy_structure_nd.mat");
    # rn   = transpose( read(file, "r" ) )[:,1];
    # zn   = transpose( read(file, "z" ) )[:,1];
    # Un   = read(file, "U"  ); Bn   = read(file, "B"  );
    # Ur   = read(file, "Ur" ); Uz   = read(file, "Uz" );
    # Br   = read(file, "Br" ); Bz   = read(file, "Bz" );
    # Œ∂n   = read(file, "Vor"); Ro   = read(file, "Ro" )
    # close(file)

    file = jldopen("eddy_structure_nd_72hrs.jld2")
    rn   = file["r"];   zn   = file["z"]
    Un   = file["U"];   Bn   = file["B"]
    Ur   = file["drU"]; Uz   = file["dzU"]
    Œ©n   = file["Œ©"];   Œ©z   = file["dzŒ©"]
    Br   = file["drB"]; Bz   = file["dzB"]
    Œ∂n   = file["Œ∂"]
    Ro   = file["Ro"]
    close(file)

    rn = vec(rn)
    zn = vec(zn)

    @assert maximum(rn) ‚â• maximum(grid.r) "asking for a domain larger than allowed!"

    println(size(Un))
    println(size(rn))
    println(size(zn))
    @printf "max value of r in file: %f \n" maximum(rn)

    R, Z = ndgrid(grid.r, grid.z)
    t  = zeros(params.Nr, params.Nz); 
    t .= R;
    t[1,1:params.Nz] .= 1.0e-6
    R‚Åª¬π = @. 1.0/t

    params.Ro = 1.05Ro

    # interpolate U and Bz
    U‚ÇÄ     = Interp2D(rn, zn, Un, grid); 
    Œ©‚ÇÄ     = Interp2D(rn, zn, Œ©n, grid); 
    B‚ÇÄ     = Interp2D(rn, zn, Bn, grid); 

    ‚àÇ ≥U‚ÇÄ   = Interp2D(rn, zn, Ur, grid); 
    ‚àÇ·∂ªU‚ÇÄ   = Interp2D(rn, zn, Uz, grid); 
    ‚àÇ·∂ªŒ©‚ÇÄ   = Interp2D(rn, zn, Œ©z, grid); 

    ‚àÇ ≥B‚ÇÄ   = Interp2D(rn, zn, Br, grid); 
    ‚àÇ·∂ªB‚ÇÄ   = Interp2D(rn, zn, Bz, grid);
    
    Œ∂‚ÇÄ     = Interp2D(rn, zn, Œ∂n, grid);
    
    println(size(U‚ÇÄ))


    U‚ÇÄ   = transpose( U‚ÇÄ ); mf.U‚ÇÄ   =   U‚ÇÄ[:];
    Œ©‚ÇÄ   = transpose( Œ©‚ÇÄ ); mf.Œ©‚ÇÄ   =   Œ©‚ÇÄ[:];
    B‚ÇÄ   = transpose( B‚ÇÄ ); mf.B‚ÇÄ   =   B‚ÇÄ[:];

    ‚àÇ ≥U‚ÇÄ = transpose(‚àÇ ≥U‚ÇÄ); mf.‚àÇ ≥U‚ÇÄ = ‚àÇ ≥U‚ÇÄ[:];
    ‚àÇ·∂ªU‚ÇÄ = transpose(‚àÇ·∂ªU‚ÇÄ); mf.‚àÇ·∂ªU‚ÇÄ = ‚àÇ·∂ªU‚ÇÄ[:];
    ‚àÇ·∂ªŒ©‚ÇÄ = transpose(‚àÇ·∂ªŒ©‚ÇÄ); mf.‚àÇ·∂ªŒ©‚ÇÄ = ‚àÇ·∂ªŒ©‚ÇÄ[:];
    
    ‚àÇ ≥B‚ÇÄ = transpose(‚àÇ ≥B‚ÇÄ); mf.‚àÇ ≥B‚ÇÄ = ‚àÇ ≥B‚ÇÄ[:];
    ‚àÇ·∂ªB‚ÇÄ = transpose(‚àÇ·∂ªB‚ÇÄ); mf.‚àÇ·∂ªB‚ÇÄ = ‚àÇ·∂ªB‚ÇÄ[:];
    
    Œ∂‚ÇÄ   = transpose( Œ∂‚ÇÄ ); mf.Œ∂‚ÇÄ   =   Œ∂‚ÇÄ[:];

    @printf "min/max values of U:  %f %f \n" minimum(U‚ÇÄ )  maximum(U‚ÇÄ )
    @printf "min/max values of Œ∂:  %f %f \n" minimum(Œ∂‚ÇÄ )  maximum(Œ∂‚ÇÄ )

    @printf "min/max value of ‚àÇzU: %f %f \n" minimum(‚àÇ·∂ªU‚ÇÄ) maximum(‚àÇ·∂ªU‚ÇÄ)
    @printf "min/max value of ‚àÇrU: %f %f \n" minimum(‚àÇ ≥U‚ÇÄ) maximum(‚àÇ ≥U‚ÇÄ)

    @printf "min/max value of ‚àÇzB: %f %f \n" minimum(‚àÇ·∂ªB‚ÇÄ) maximum(‚àÇ·∂ªB‚ÇÄ)
    @printf "min/max value of ‚àÇrB: %f %f \n" minimum(‚àÇ ≥B‚ÇÄ ) maximum(‚àÇ ≥B‚ÇÄ )

    return nothing
end

function construct_lhs_matrix(params)
    T::Type = Float64
    N       = params.Nr * params.Nz
    grid    = Grid{params.Nr, params.Nz, T}() 
    Op      = Operator{N, T}()
    mf      = MeanFlow{N, T}()
    ChebMatrix!(grid, params)
    ChebDiff_Matrix!(Op, params, grid, T)
    meanflow!(mf, Op, params, grid, T)

    Œ©    = sparse( diagm(mf.Œ©‚ÇÄ) )
    Œ∂    = sparse( diagm(mf.Œ∂‚ÇÄ) )
    ‚àá ≥U  = sparse(diagm(mf.‚àÇ ≥U‚ÇÄ))
    ‚àá·∂ªU  = sparse(diagm(mf.‚àÇ·∂ªU‚ÇÄ))
    ‚àá·∂ªŒ©  = sparse(diagm(mf.‚àÇ·∂ªŒ©‚ÇÄ))
    ‚àá ≥B  = sparse(diagm(mf.‚àÇ ≥B‚ÇÄ))
    ‚àá·∂ªB  = sparse(diagm(mf.‚àÇ·∂ªB‚ÇÄ))

    @printf "Rossby number: %f \n" params.Ro

    R, Z = ndgrid(grid.r, grid.z)
    R  = transpose(R); 
    R  = R[:]; 
    R¬≤ = @. R^2

    R‚ÇÄ   = sparse(diagm(   1.0 .* R   ))
    R‚ÇÄ¬≤  = sparse(diagm(   1.0 .* R¬≤  ))
    R[R .== 0.0] .= 1.0e-6
    R‚Åª¬π::Array{T, 2} = SparseMatrixCSC(Zeros(N, N))
    R‚Åª¬≤::Array{T, 2} = SparseMatrixCSC(Zeros(N, N))
    R‚Åª¬π = sparse( diagm( 1.0 ./ R ) )
    R‚Åª¬≤ = sparse( diagm( 1.0 ./ R¬≤) )
    
    I‚Å∞  = sparse(1.0I, N, N) 
    im_m = 1.0im * params.m
    tmp = sparse(1.0 * Op.ùíü¬≤ + 1.0im_m * params.Ro * Œ© * I‚Å∞)
    
    # -------- stuff required for boundary conditions -------------
    ri, zi = ndgrid(1:1:params.Nr, 1:1:params.Nz)
    ri     = transpose(ri); 
    zi     = transpose(zi);
    ri     = ri[:]; zi   = zi[:];
    bc ≥‚ÇÅ   = findall( x -> (x==1),                  ri );
    bc ≥‚ÇÇ   = findall( x -> (x==params.Nr),          ri );
    bc ≥    = findall( x -> (x==1) | (x==params.Nr), ri );
    bc·∂ª    = findall( x -> (x==1) | (x==params.Nz), zi );

    Tc::Type = ComplexF64

    s‚ÇÅ = size(I‚Å∞, 1); 
    s‚ÇÇ = size(I‚Å∞, 2);
    ùìõ‚ÇÅ = SparseMatrixCSC(Zeros{Tc}(s‚ÇÅ, 5s‚ÇÇ));
    ùìõ‚ÇÇ = SparseMatrixCSC(Zeros{Tc}(s‚ÇÅ, 5s‚ÇÇ));
    ùìõ‚ÇÉ = SparseMatrixCSC(Zeros{Tc}(s‚ÇÅ, 5s‚ÇÇ));
    ùìõ‚ÇÑ = SparseMatrixCSC(Zeros{Tc}(s‚ÇÅ, 5s‚ÇÇ));
    ùìõ‚ÇÖ = SparseMatrixCSC(Zeros{Tc}(s‚ÇÅ, 5s‚ÇÇ));
    B  = SparseMatrixCSC(Zeros{Tc}(s‚ÇÅ, 5s‚ÇÇ));

    Œµ¬≤ = params.Œµ^2
    @printf "Œµ¬≤: %f \n" Œµ¬≤
    
    # lhs of the matrix (size := 5 √ó 5)
    # eigenvectors: [ur uŒ∏ w p b]·µÄ
    # ur-momentum equation 
    ùìõ‚ÇÅ[:,    1:1s‚ÇÇ] = 1.0 * tmp + 1.0params.E * R‚Åª¬≤ * I‚Å∞
    ùìõ‚ÇÅ[:,1s‚ÇÇ+1:2s‚ÇÇ] = (-1.0 * I‚Å∞ 
                    - 2.0params.Ro * Œ© * I‚Å∞
                    + 2.0im_m * params.E * R‚Åª¬≤ * I‚Å∞)
    ùìõ‚ÇÅ[:,3s‚ÇÇ+1:4s‚ÇÇ] = 1.0 * Op.ùíü ≥
    # bc for `ur' in r-direction 
    if params.m == 0.0
        @printf "m = %f \n" params.m
        B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÅ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÅ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    elseif params.m == 1.0
        @printf "m = %f \n" params.m
        B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * Op.ùíü ≥; ùìõ‚ÇÅ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÅ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    else
        B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÅ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÅ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    end
    # bc for `ur' in z-directon
    B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * Op.ùíü·∂ª;     ùìõ‚ÇÅ[bc·∂ª, :] = B[bc·∂ª, :]

    # uŒ∏-momentum equation
    ùìõ‚ÇÇ[:,    1:1s‚ÇÇ] = (1.0params.Ro * Œ∂ * I‚Å∞
                    + 1.0 * I‚Å∞ 
                    - 2.0im_m * params.E * R‚Åª¬≤ * I‚Å∞)
    ùìõ‚ÇÇ[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * tmp + 1.0params.E * R‚Åª¬≤ * I‚Å∞
    ùìõ‚ÇÇ[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0params.Ro * R‚ÇÄ * ‚àá·∂ªŒ© * I‚Å∞
    ùìõ‚ÇÇ[:,3s‚ÇÇ+1:4s‚ÇÇ] = 1.0im_m * R‚Åª¬π * I‚Å∞
    # bc for `uŒ∏' in r-direction
    if params.m == 0.0
        @printf "m = %f \n" params.m
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÇ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÇ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    elseif params.m == 1.0
        @printf "m = %f \n" params.m
        B .= 0.0; B = sparse(B); B[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÇ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0im * I‚Å∞;  ùìõ‚ÇÇ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÇ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    else
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÇ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÇ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    end
    # bc for `uŒ∏' in z-direction
    B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * Op.ùíü·∂ª;     ùìõ‚ÇÇ[bc·∂ª, :]  = B[bc·∂ª, :]

    # w-momentum equation 
    ùìõ‚ÇÉ[:,2s‚ÇÇ+1:3s‚ÇÇ] =  1.0    * tmp
    ùìõ‚ÇÉ[:,3s‚ÇÇ+1:4s‚ÇÇ] =  1.0/Œµ¬≤ * Op.ùíü·∂ª
    ùìõ‚ÇÉ[:,4s‚ÇÇ+1:5s‚ÇÇ] = -1.0/Œµ¬≤ * I‚Å∞
    # bc for `w' in r-direction 
    if params.m == 0.0
        @printf "m = %f \n" params.m
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * Op.ùíü ≥; ùìõ‚ÇÉ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÉ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    else
        B .= 0.0; B = sparse(B); B[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÉ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÉ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    end
    # bc for `w' in z-direction
    B .= 0.0; B = sparse(B); B[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0 * I‚Å∞; ùìõ‚ÇÉ[bc·∂ª, :]  = B[bc·∂ª, :]

    # ‚àá‚ãÖu‚Éó = 0 
    ùìõ‚ÇÑ[:,    1:1s‚ÇÇ] = 1.0 * I‚Å∞ + 1.0 * R‚ÇÄ * Op.ùíü ≥ 
    ùìõ‚ÇÑ[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0im_m * I‚Å∞
    ùìõ‚ÇÑ[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0 * R‚ÇÄ * Op.ùíü·∂ª
    # bc for `p' in r-direction 
    if params.m == 0.0
        @printf "m = %f \n" params.m
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * Op.ùíü ≥; ùìõ‚ÇÑ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,1s‚ÇÇ+1:2s‚ÇÇ] = 1.0 * Op.ùíü ≥; ùìõ‚ÇÑ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    else
        B .= 0.0; B = sparse(B); B[:,3s‚ÇÇ+1:4s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÑ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
        B .= 0.0; B = sparse(B); B[:,3s‚ÇÇ+1:4s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÑ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    end
    # bc for `p' in z-direction
    B .= 0.0; B = sparse(B); B[:,3s‚ÇÇ+1:4s‚ÇÇ] = 1.0 * Op.ùíü·∂ª;     ùìõ‚ÇÑ[bc·∂ª, :]  = B[bc·∂ª, :]

    # buoyancy equation
    ùìõ‚ÇÖ[:,    1:1s‚ÇÇ] = 1.0params.Ro * ‚àá ≥B * I‚Å∞
    ùìõ‚ÇÖ[:,2s‚ÇÇ+1:3s‚ÇÇ] = 1.0params.Ro * ‚àá·∂ªB * I‚Å∞
    ùìõ‚ÇÖ[:,4s‚ÇÇ+1:5s‚ÇÇ] = 1.0 * tmp
    # bc for `b' in r-direction 
    B .= 0.0; B = sparse(B); B[:,4s‚ÇÇ+1:5s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÖ[bc ≥‚ÇÅ, :] = B[bc ≥‚ÇÅ, :]
    B .= 0.0; B = sparse(B); B[:,4s‚ÇÇ+1:5s‚ÇÇ] = 1.0 * I‚Å∞;    ùìõ‚ÇÖ[bc ≥‚ÇÇ, :] = B[bc ≥‚ÇÇ, :]
    # bc for `b' in z-direction
    B .= 0.0; B = sparse(B); B[:,4s‚ÇÇ+1:5s‚ÇÇ] = 1.0 * Op.ùíü·∂ª; ùìõ‚ÇÖ[bc·∂ª, :]  = B[bc·∂ª, :]

    ùìõ = sparse([ùìõ‚ÇÅ; ùìõ‚ÇÇ; ùìõ‚ÇÉ; ùìõ‚ÇÑ; ùìõ‚ÇÖ]);
    ‚Ñ≥ = construct_rhs_matrix(params, grid)

    return grid.r, grid.z, ùìõ, ‚Ñ≥
end


function construct_rhs_matrix(params, grid, T::Type=Float64)
    N  = params.Nr*params.Nz
    I‚ÇÄ = sparse(T, 1.0I, N, N) 

    ri, zi = ndgrid(1:1:params.Nr, 1:1:params.Nz)
    ri  = transpose(ri); 
    zi  = transpose(zi)
    ri  = ri[:]; zi = zi[:]
    bc ≥ = findall( x -> (x==1) | (x==params.Nr), ri )
    bc·∂ª = findall( x -> (x==1) | (x==params.Nz), zi )

    s‚ÇÅ = size(I‚ÇÄ, 1); s‚ÇÇ = size(I‚ÇÄ, 2)
    ‚Ñ≥‚ÇÅ = SparseMatrixCSC(Zeros{T}(s‚ÇÅ, 5s‚ÇÇ));
    ‚Ñ≥‚ÇÇ = SparseMatrixCSC(Zeros{T}(s‚ÇÅ, 5s‚ÇÇ));
    ‚Ñ≥‚ÇÉ = SparseMatrixCSC(Zeros{T}(s‚ÇÅ, 5s‚ÇÇ));
    ‚Ñ≥‚ÇÑ = SparseMatrixCSC(Zeros{T}(s‚ÇÅ, 5s‚ÇÇ));
    ‚Ñ≥‚ÇÖ = SparseMatrixCSC(Zeros{T}(s‚ÇÅ, 5s‚ÇÇ));

    #       |1   0   0   0   0|
    #       |0   1   0   0   0|
    # M = - |0   0   1   0   0| * m
    #       |0   0   0   0   0|
    #       |0   0   0   0   1|

    ‚Ñ≥‚ÇÅ[:,    1:1s‚ÇÇ] = -1.0I‚ÇÄ; 
    ‚Ñ≥‚ÇÇ[:,1s‚ÇÇ+1:2s‚ÇÇ] = -1.0I‚ÇÄ; 
    ‚Ñ≥‚ÇÉ[:,2s‚ÇÇ+1:3s‚ÇÇ] = -1.0I‚ÇÄ; 
    ‚Ñ≥‚ÇÖ[:,4s‚ÇÇ+1:5s‚ÇÇ] = -1.0I‚ÇÄ; 

    ‚Ñ≥‚ÇÅ[bc ≥, :] .= 0.0;  ‚Ñ≥‚ÇÅ[bc·∂ª, :] .= 0.0;
    ‚Ñ≥‚ÇÇ[bc ≥, :] .= 0.0;  ‚Ñ≥‚ÇÇ[bc·∂ª, :] .= 0.0;
    ‚Ñ≥‚ÇÉ[bc ≥, :] .= 0.0;  ‚Ñ≥‚ÇÉ[bc·∂ª, :] .= 0.0;
    ‚Ñ≥‚ÇÖ[bc ≥, :] .= 0.0;  ‚Ñ≥‚ÇÖ[bc·∂ª, :] .= 0.0;

    ‚Ñ≥ = sparse([‚Ñ≥‚ÇÅ; ‚Ñ≥‚ÇÇ; ‚Ñ≥‚ÇÉ; ‚Ñ≥‚ÇÑ; ‚Ñ≥‚ÇÖ])

    return ‚Ñ≥
end


@with_kw mutable struct Params{T<:Real} @deftype T
    R::T     = 3.0
    H::T     = 1.0   
    E::T     = 1.0e-8
    Œµ::T     = 0.1
    Nr::Int  = 120
    Nz::Int  = 40
    m::T     = 2.0
    Ro::T    = 1.0
end

struct ShiftAndInvert{TA,TB,TT}
    A_lu::TA
    B::TB
    temp::TT
end

function (M::ShiftAndInvert)(y, x)
    mul!(M.temp, M.B, x)
    ldiv!(y, M.A_lu, M.temp)
end

function construct_linear_map(A, B)
    a = ShiftAndInvert(factorize(A), B, Vector{eltype(A)}(undef, size(A,1)))
    LinearMap{eltype(A)}(a, size(A,1), ismutating=true)
end

function construct_linear_map(H, S, num_thread)
    ps = MKLPardisoSolver()
    set_nprocs!(ps, num_thread) 
    set_matrixtype!(ps, Pardiso.COMPLEX_NONSYM)
    pardisoinit(ps)
    fix_iparm!(ps, :N)
    H_pardiso = get_matrix(ps, H, :N)
    b = rand(ComplexF64, size(H, 1))
    set_phase!(ps, Pardiso.ANALYSIS)
    #set_msglvl!(ps, Pardiso.MESSAGE_LEVEL_ON)
    pardiso(ps, H_pardiso, b)
    set_phase!(ps, Pardiso.NUM_FACT)
    pardiso(ps, H_pardiso, b)
    return (LinearMap{ComplexF64}(
            (y, x) -> begin
                set_phase!(ps, Pardiso.SOLVE_ITERATIVE_REFINE)
                pardiso(ps, y, H_pardiso, S * x)
            end,
            size(H, 1);
            ismutating=true), ps)
end

function solve_AAI2d(m, Œªref, ra, rb) #,Œª‚Çõ)
    params = Params{Float64}(m=1.0m)
    @printf "Ekman number: %1.1e \n" params.E
    @info("Start matrix constructing ...")

    r, z, ùìõ, ‚Ñ≥ = construct_lhs_matrix(params)
    @info("Matrix construction done ...")

    @. ùìõ *= 1.0/params.m 

    @printf "Matrix size is: %d √ó %d \n" size(ùìõ, 1) size(ùìõ, 2)

    N = params.Nr * params.Nz
    MatSize = 5N 

    # mmwrite("60_360_julia/systemA_" * string(trunc(Int32, m+1e-2)) * ".mtx", sparse(ùìõ))
    # mmwrite("60_360_julia/systemB_" * string(trunc(Int32, m+1e-2)) * ".mtx", sparse(‚Ñ≥))

    #* Method: 1
    @info("Eigensolver using `implicitly restarted Arnoldi method' ...")
    decomp, history = partialschur(
        construct_linear_map(ùìõ, ‚Ñ≥), nev=5000, tol=0.0, restarts=300, which=LR()
        )
    Œª‚Çõ‚Åª¬π, Œß = partialeigen(decomp)  
    Œª‚Çõ = @. 1.0 / Œª‚Çõ‚Åª¬π #* -1.0*im

    ## Method: 2
    # lm, ps  = construct_linear_map(ùìõ, ‚Ñ≥, 40)
    # @info("Construction of linear map is done!")
    # Œª‚Çõ‚Åª¬π, Œß = eigs(lm, tol=1e-6, maxiter=100, nev=2000, which=:LR)
    # # Release all internal memory for all matrices
    # set_phase!(ps, Pardiso.RELEASE_ALL) 
    # pardiso(ps)
    # ## Eigenvalues have to be inverted to find the smallest eigenvalues of the non-inverted problem.
    # Œª‚Çõ = @. 1.0 / Œª‚Çõ‚Åª¬π #* -1.0*im
   
    #* Method: 3
    # œÉ = 3e-3 + 0.21im
    # printstyled("Eigensolver using Arpack eigs with shift and invert method ...\n"; 
    #                 color=:red)
    # œÉ·µ¢ = 0.15:0.02:0.35
    # Œª‚Çê = []
    # for œÉ·µ¢‚Å∞ in œÉ·µ¢
    #     try
    #         Œª‚Çõ, Œß = EigSolver_shift_invert(ùìõ, ‚Ñ≥, œÉ‚ÇÄ=œÉ.re + 1im * œÉ·µ¢‚Å∞)
    #         @printf "found eigenvalue: %f + im %f \n" Œª‚Çõ[1].re Œª‚Çõ[1].im
    #         error = 1.0
    #         Iter::Int = 0
    #         Œª‚Çú = []
    #         while error > 5e-3 && Iter < 5
    #             Œª‚Çõ_old = Œª‚Çõ
    #             Œª‚Çõ, Œß = EigSolver_shift_invert1(ùìõ, ‚Ñ≥, œÉ‚ÇÄ=Œª‚Çõ[1])
    #             @printf "found eigenvalue: %f + im %f \n" Œª‚Çõ[1].re Œª‚Çõ[1].im
    #             error = abs(Œª‚Çõ[1] - Œª‚Çõ_old[1])/abs(Œª‚Çõ[1])
    #             Iter += 1
    #             append!(Œª‚Çú, Œª‚Çõ)
    #         end
    #         Œª‚Çò‚Çê‚Çì = maximum(real(Œª‚Çú))
    #         loc::Int = 0
    #         for it in 1:length(Œª‚Çú)
    #             if real(Œª‚Çú[it]) == Œª‚Çò‚Çê‚Çì
    #                 loc = it
    #             end
    #         end
    #         append!(Œª‚Çê, 1.0Œª‚Çú[loc])
    #     catch error
    #        append!(Œª‚Çê, 0.0)
    #     end
    # end
    # println(Œª‚Çê)

    # Œª‚Çò‚Çê‚Çì = maximum(real(Œª‚Çê))
    # loc  = 0
    # for it in 1:length(Œª‚Çê)
    #     if real(Œª‚Çê[it]) == Œª‚Çò‚Çê‚Çì
    #         loc = it
    #         println(loc)
    #     end
    # end
    # Œª‚Çõ = 1.0Œª‚Çê[loc]  
    # #Œª‚Çõ = 0.0041579 + 0.22866im
    # Œª‚Çõ, Œß = Arpack.eigs(ùìõ, ‚Ñ≥,
    #                     nev     = 1, 
    #                     tol     = 1.0e-10, 
    #                     maxiter = 30, 
    #                     which   = :LR,
    #                     sigma   = 0.99Œª‚Çõ,)
    
    
    ###FEAST parameters
    T::Type             = Float64
    emid::ComplexF64    = Œªref #complex(0.1, 0.0)   #contour center
    ra::T               = ra                        #contour radius 1
    rb::T               = rb                        #contour radius 2
    nc::Int64           = 100                       #number of contour points
    m‚ÇÄ::Int64           = 40                        #subspace dimension
    Œµ::T                = 1.0e-5                    #residual convergence tolerance
    maxit::Int64        = 100                       #maximum FEAST iterations
    x‚ÇÄ                  = sprand(ComplexF64, MatSize, m‚ÇÄ, 0.1)   #eigenvector initial guess
    # @info("Standard FEAST!")
    # @printf "size of the subspace: %d \n" m‚ÇÄ
    # @printf "no. of contour points: %d \n" nc
    # @printf "contour radius: %f \n" ra
    # Œª‚Çõ, Œß = feast_linear(ùìõ, ‚Ñ≥, x‚ÇÄ, nc, emid, ra, rb, Œµ, 0.0, 0.0+0.0im, maxit)

    #contour    = circular_contour_trapezoidal(emid, ra, 50)
    #Œª‚Çõ, Œß, res = gen_feast!(x‚ÇÄ, ùìõ, ‚Ñ≥, contour, iter=maxit, debug=true, œµ=Œµ)

#################

    cnst = 1.0params.m
    Œª‚Çõ = @. Œª‚Çõ * cnst
    @assert length(Œª‚Çõ) ‚â• 1 "No eigenvalue(s) found!"

    ## Post Process egenvalues
    ## removes the magnitude of eigenvalue ‚â• min value and ‚â§ max value
    # Option: "M" : magnitude, "R" : real, "I" : imaginary 
    Œª‚Çõ, Œß = remove_evals(Œª‚Çõ, Œß, 0.0, 1.0e2, "I") 
    # sorting the eignevalues Œª‚Çõ (real part: growth rate) based on maximum value 
    # and corresponding eigenvectors Œß
    Œª‚Çõ, Œß = sort_evals(Œª‚Çõ, Œß, "R", "lm")

    #= 
    this removes any further spurious eigenvalues based on norm 
    if you don't need it, just `comment' it!
    =#
    @show norm(ùìõ * Œß[:,1] - Œª‚Çõ[1]/cnst * ‚Ñ≥ * Œß[:,1]) 
    # while norm(ùìõ * Œß[:,1] - Œª‚Çõ[1]/cnst * ‚Ñ≥ * Œß[:,1]) > 1.0e-4 #|| imag(Œª‚Çõ[1]) < 0.0
    #     @printf "norm: %f \n" norm(ùìõ * Œß[:,1] - Œª‚Çõ[1]/cnst * ‚Ñ≥ * Œß[:,1]) 
    #     Œª‚Çõ, Œß = remove_spurious(Œª‚Çõ, Œß)
    #     println(Œª‚Çõ[1])        
    # end

    print_evals(Œª‚Çõ/cnst, length(Œª‚Çõ))

    ùìõ = nothing
    ‚Ñ≥ = nothing

    #return nothing #Œª‚Çõ #[1:5] #[1:3], Œß #, u·µ£, u‚Çú, w, b
    return r, z, Œª‚Çõ #[1] #, Œß, N #u·µ£, u‚Çú, w, b
end


function EigsSolver()
    m = collect(LinRange(1, 25, 25))
    Œª‚Çõ = Array{ComplexF64}(undef, length(m))

    Œªref = complex(0.06, 0.16)
    ra = 0.06
    rb = ra 
    
    for it ‚àà 7:1:7
        @printf "value of m: %f \n" m[it]
        
        # if it == 1
        #     Œª = 0.0
        # else
        #     Œª = Œª‚Çõ[it-1]/m[it-1]
        # end

        @time r, z, Œª‚Çõ =  #[it] = #, Œß, N = 
                    solve_AAI2d(m[it], Œªref, ra, rb) #, it, Œª)

        # twoDContour(r, z, Œß[:,1], N, it)
        # jldsave("pertubation_60360_m" * string(it) * ".jld2"; 
        #                             r=r, 
        #                             z=z,
        #                             N=N, 
        #                             m=m[it],
        #                             Œª‚Çõ=Œª‚Çõ[it],
        #                             Xre=Œß[:,1], )

        #@time solve_AAI2d(m[it], Œªref, ra, rb)

        # which::Int = 1
        # u·µ£ = cat( real(Œß[   1:1N, which]), imag(Œß[   1:1N, which]), dims=2 ); 
        # u‚Çú = cat( real(Œß[1N+1:2N, which]), imag(Œß[1N+1:2N, which]), dims=2 ); 
        # w  = cat( real(Œß[2N+1:3N, which]), imag(Œß[2N+1:3N, which]), dims=2 ); 
        # p  = cat( real(Œß[3N+1:4N, which]), imag(Œß[3N+1:4N, which]), dims=2 ); 
        # b  = cat( real(Œß[4N+1:5N, which]), imag(Œß[4N+1:5N, which]), dims=2 ); 
        # save("matrices_60/first_eigenfun_m" * string(trunc(Int32, m[it]+1e-2)) *".jld", 
        #    "r", r, "z", z, "ur", u·µ£, "ut", u‚Çú, "w", w, "b", b)

        # which = 2
        # u·µ£ = cat( real(Œß[   1:1N, which]), imag(Œß[   1:1N, which]), dims=2 ); 
        # u‚Çú = cat( real(Œß[1N+1:2N, which]), imag(Œß[1N+1:2N, which]), dims=2 ); 
        # w  = cat( real(Œß[2N+1:3N, which]), imag(Œß[2N+1:3N, which]), dims=2 ); 
        # p  = cat( real(Œß[3N+1:4N, which]), imag(Œß[3N+1:4N, which]), dims=2 ); 
        # b  = cat( real(Œß[4N+1:5N, which]), imag(Œß[4N+1:5N, which]), dims=2 );
        # save("matrices_60/second_eigenfun_m" * string(trunc(Int32, m[it]+1e-2)) *".jld", 
        #     "r", r, "z", z, "ur", u·µ£, "ut", u‚Çú, "w", w, "b", b)

        @printf("=================================================================== \n")
    end
    #save("GrowthRate_1_20_60_360.jld", "m", m, "ev", Œª‚Çõ)
    save("GrowthRate_40_m7.jld", "ev", Œª‚Çõ)
end

EigsSolver()

# file = matopen("AmS_structure.mat");
# rn   = transpose( read(file, "r" ) )[:,1];
# zn   = transpose( read(file, "z" ) )[:,1];
# AmS  = transpose( read(file, "AmS") );
# close(file)

# @printf "min/max of A-S: %f %f \n" minimum(AmS) maximum(AmS)
# levels  = LinRange(minimum(AmS), maximum(AmS), 12) 
# levels‚Çã = levels[findall( x -> (x ‚â§ 0.0), levels )]
# levels‚Çä = levels[findall( x -> (x > 0.0), levels )]

# m = 1.0
# Œªref = complex(0.08, 0.2)
# ra = 0.08
# rb = ra 
# @time U, r, z, Œª‚Çõ, u·µ£, u‚Çú, w, b = solve_AAI2d(m, Œªref, ra, rb)
# #@time solve_AAI2d(m, Œªref, ra, rb)

# # save("eigenfun_m" * string(trunc(Int32, m+1e-2)) *".jld", 
# #     "r", r, "z", z, "ur", u·µ£, "ut", u‚Çú, "w", w, "b", b)

# U = diag(U)
# #B = diag(B)


